{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "type": "text",
      "version": 399,
      "versionNonce": 1418429434,
      "isDeleted": false,
      "id": "FyuGY2iSOzzO_MQHjcU9c",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 266.12890625,
      "y": 122.2265625,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 714.84375,
      "height": 216,
      "seed": 928050534,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": null,
      "updated": 1703636594436,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Day One - Trebuchet Part One\n\n1. For each line look at the characters and combine the first\nand last characters that are a number to create a two \ndigit number.\n2. Store the 2 digit number\n3. When all the characters have been scanned, sum the two\ndigit numbers together\n4. Bonus - Try and refactor this into a reduce",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Day One - Trebuchet Part One\n\n1. For each line look at the characters and combine the first\nand last characters that are a number to create a two \ndigit number.\n2. Store the 2 digit number\n3. When all the characters have been scanned, sum the two\ndigit numbers together\n4. Bonus - Try and refactor this into a reduce",
      "lineHeight": 1.2,
      "baseline": 212
    },
    {
      "type": "text",
      "version": 1855,
      "versionNonce": 1804783290,
      "isDeleted": false,
      "id": "2NFp5FPCO4hIZ8zVd5z82",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 266.69140625,
      "y": 402.109375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 726.5625,
      "height": 576,
      "seed": 890479645,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1703636579255,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Day One - Trebuchet Part Two\n\nNow this includes numbers that are spelled out by letters. \nThe added complexity of this is that this means that these\nnumbers that are spelled out need to happen before the \nletters of the whole word are split out. This means that \nthere needs to be some sort of tracking of the character \nindex a number word is. Then that is compared to the digit\nto see which one comes first.\n\n1. For each line look at the word to see if any number words\nexist and return the index of the last character. Return 2 \nnumbers, of the first and last word number\n2. Do above #1 in part 1\n3. Compare #2's first number with the index of the number \nword, and last number with 2nd index number word. Whichever\none is smaller for first, and larger for last digit accept \nthose as the correct two digits\n4. Do above #3\n\nApproach #2 - Convert the number words into digits and then\nrerun part 1. This approach should be more performent as it \nmeans you only need to convert the first and last found \nnumber words into digits as the ones after that are irrelevant",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Day One - Trebuchet Part Two\n\nNow this includes numbers that are spelled out by letters. \nThe added complexity of this is that this means that these\nnumbers that are spelled out need to happen before the \nletters of the whole word are split out. This means that \nthere needs to be some sort of tracking of the character \nindex a number word is. Then that is compared to the digit\nto see which one comes first.\n\n1. For each line look at the word to see if any number words\nexist and return the index of the last character. Return 2 \nnumbers, of the first and last word number\n2. Do above #1 in part 1\n3. Compare #2's first number with the index of the number \nword, and last number with 2nd index number word. Whichever\none is smaller for first, and larger for last digit accept \nthose as the correct two digits\n4. Do above #3\n\nApproach #2 - Convert the number words into digits and then\nrerun part 1. This approach should be more performent as it \nmeans you only need to convert the first and last found \nnumber words into digits as the ones after that are irrelevant",
      "lineHeight": 1.2,
      "baseline": 572
    },
    {
      "type": "text",
      "version": 1373,
      "versionNonce": 1178528762,
      "isDeleted": false,
      "id": "LJYFkcBIqQIF_bseXkK0F",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1105.7584381453307,
      "y": 122.7956237093384,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 691.40625,
      "height": 312,
      "seed": 1401460132,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1703636818536,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "Day One - Trebuchet Part Two (Fail)\n\nMy solution of reversing and converting the first and\nlast worded digits was a good idea, but I just found out\nthat words such as \"twone\" should mean 21 and that is \nmessing up my code as I do a replacement on the first/last\nnumber word it sees, so in some cases taking away those\ncharacters stop a number from being a word.\n\nQuite frustrated as this is not clear and in this should\nhave been included in the example from the get go. Gonna \ncall it a day for this one and maybe revisit it later on,\nmy current code is working correctly and tests are passing!",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Day One - Trebuchet Part Two (Fail)\n\nMy solution of reversing and converting the first and\nlast worded digits was a good idea, but I just found out\nthat words such as \"twone\" should mean 21 and that is \nmessing up my code as I do a replacement on the first/last\nnumber word it sees, so in some cases taking away those\ncharacters stop a number from being a word.\n\nQuite frustrated as this is not clear and in this should\nhave been included in the example from the get go. Gonna \ncall it a day for this one and maybe revisit it later on,\nmy current code is working correctly and tests are passing!",
      "lineHeight": 1.2,
      "baseline": 308
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}